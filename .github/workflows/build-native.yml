name: Build Native Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-native:
    name: Build Native Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable: lucee-toolbox-linux-x64
          - os: windows-latest
            platform: windows
            arch: x64
            executable: lucee-toolbox-windows-x64.exe
          - os: macos-latest
            platform: macos
            arch: x64
            executable: lucee-toolbox-macos-x64
          - os: macos-latest
            platform: macos
            arch: arm64
            executable: lucee-toolbox-macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        components: 'native-image'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build JAR
      run: |
        mvn clean package -DskipTests

    - name: Get version from pom.xml (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
        echo "JAR_NAME=lucee-toolbox-$VERSION.jar" >> $GITHUB_ENV

    - name: Get version from pom.xml (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        [xml]$pom = Get-Content -Path "pom.xml"
        $version = $pom.project.version
        Write-Host "Detected version: $version"
        echo "PROJECT_VERSION=$version" >> $env:GITHUB_ENV
        echo "JAR_NAME=lucee-toolbox-$version.jar" >> $env:GITHUB_ENV

    - name: Create dist directory (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p dist

    - name: Create dist directory (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path "dist")) {
          New-Item -ItemType Directory -Path "dist" | Out-Null
        }

    - name: Build Native Binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        native-image \
          -jar target/${{ env.JAR_NAME }} \
          -o dist/${{ matrix.executable }}

    - name: Build Native Binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        native-image `
          -jar target/${{ env.JAR_NAME }} `
          -o dist/lucee-toolbox-windows-x64

    - name: Test Native Binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./dist/${{ matrix.executable }} --version
        echo 'dump(server);' | ./dist/${{ matrix.executable }} --ignore-violations || true

    - name: Test Native Binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        & ".\dist\${{ matrix.executable }}" --version
        Write-Host "Testing help command..."
        & ".\dist\${{ matrix.executable }}" --help | Out-Null
        Write-Host "Windows binary test completed successfully"

    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.executable }}
        path: dist/${{ matrix.executable }}

  # create-development-release:
  #   name: Create Development Release
  #   needs: build-native
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #   - name: Download all artifacts
  #     uses: actions/download-artifact@v4
  #     
  #   - name: Create Development Release
  #     uses: softprops/action-gh-release@v1
  #     with:
  #       tag_name: dev-${{ github.run_number }}
  #       name: "Development Build #${{ github.run_number }}"
  #       body: |
  #         ðŸš€ **Development Build from commit ${{ github.sha }}**
  #         
  #         This is an automated development release created from the latest main branch.
  #         
  #         **Changes in this build:**
  #         ${{ github.event.head_commit.message }}
  #         
  #         **Files included:**
  #         - `lucee-toolbox-linux-x64` - Linux x64 native binary
  #         - `lucee-toolbox-macos-x64` - macOS x64 native binary  
  #         - `lucee-toolbox-macos-arm64` - macOS ARM64 native binary
  #         - `lucee-toolbox-windows-x64.exe` - Windows x64 native binary
  #         
  #         **Usage:**
  #         ```bash
  #         # Make executable (Linux/macOS)
  #         chmod +x lucee-toolbox-*
  #         
  #         # Test the binary
  #         ./lucee-toolbox-linux-x64 --version
  #         
  #         # Lint CFML files
  #         ./lucee-toolbox-linux-x64 -i src/
  #         ```
  #       draft: false
  #       prerelease: true
  #       files: |
  #         lucee-toolbox-linux-x64/lucee-toolbox-linux-x64
  #         lucee-toolbox-macos-x64/lucee-toolbox-macos-x64
  #         lucee-toolbox-macos-arm64/lucee-toolbox-macos-arm64
  #         lucee-toolbox-windows-x64.exe/lucee-toolbox-windows-x64.exe
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    needs: build-native
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          lucee-toolbox-linux-x64/lucee-toolbox-linux-x64
          lucee-toolbox-macos-x64/lucee-toolbox-macos-x64
          lucee-toolbox-macos-arm64/lucee-toolbox-macos-arm64
          lucee-toolbox-windows-x64.exe/lucee-toolbox-windows-x64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
